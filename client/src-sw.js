const { offlineFallback, warmStrategyCache } = require('workbox-recipes');
const { CacheFirst, StaleWhileRevalidate } = require('workbox-strategies');
const { registerRoute } = require('workbox-routing');
const { CacheableResponsePlugin } = require('workbox-cacheable-response');
const { ExpirationPlugin } = require('workbox-expiration');
const { precacheAndRoute } = require('workbox-precaching/precacheAndRoute');

// Precache files generated by Webpack (using __WB_MANIFEST)
precacheAndRoute(self.__WB_MANIFEST);

// Page caching strategy - Cache HTML files
const pageCache = new CacheFirst({
  cacheName: 'page-cache',
  plugins: [
    new CacheableResponsePlugin({
      statuses: [0, 200], // Cache responses with status 0 or 200
    }),
    new ExpirationPlugin({
      maxAgeSeconds: 30 * 24 * 60 * 60, // Cache for 30 days
    }),
  ],
});

// Precache important pages to improve initial loading time
warmStrategyCache({
  urls: ['/index.html', '/'],
  strategy: pageCache,
});

// Cache HTML pages with CacheFirst strategy
registerRoute(({ request }) => request.mode === 'navigate', pageCache);

// Asset caching strategy - Cache CSS, JS, and images with StaleWhileRevalidate
registerRoute(
  ({ request }) => ['style', 'script', 'image'].includes(request.destination),
  new StaleWhileRevalidate({
    cacheName: 'asset-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200], // Cache responses with status 0 or 200
      }),
      new ExpirationPlugin({
        maxEntries: 60, // Cache up to 60 assets
        maxAgeSeconds: 30 * 24 * 60 * 60, // Cache assets for 30 days
      }),
    ],
  })
);

// Fallback strategy for offline use
offlineFallback({
  pageFallback: '/offline.html', // Fallback to this page if offline
});
